/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type WithdrawCoreAssetV1InstructionAccounts = {
  recipe: PublicKey | Pda;
  checklist: PublicKey | Pda;
  asset: PublicKey | Pda;
  collection: PublicKey | Pda;
  payer?: Signer;
  mplCore?: PublicKey | Pda;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type WithdrawCoreAssetV1InstructionData = {
  discriminator: Array<number>;
  reversed: boolean;
};

export type WithdrawCoreAssetV1InstructionDataArgs = { reversed: boolean };

export function getWithdrawCoreAssetV1InstructionDataSerializer(): Serializer<
  WithdrawCoreAssetV1InstructionDataArgs,
  WithdrawCoreAssetV1InstructionData
> {
  return mapSerializer<
    WithdrawCoreAssetV1InstructionDataArgs,
    any,
    WithdrawCoreAssetV1InstructionData
  >(
    struct<WithdrawCoreAssetV1InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['reversed', bool()],
      ],
      { description: 'WithdrawCoreAssetV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [54, 194, 85, 18, 207, 60, 106, 42],
    })
  ) as Serializer<
    WithdrawCoreAssetV1InstructionDataArgs,
    WithdrawCoreAssetV1InstructionData
  >;
}

// Args.
export type WithdrawCoreAssetV1InstructionArgs =
  WithdrawCoreAssetV1InstructionDataArgs;

// Instruction.
export function withdrawCoreAssetV1(
  context: Pick<Context, 'payer' | 'programs'>,
  input: WithdrawCoreAssetV1InstructionAccounts &
    WithdrawCoreAssetV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );

  // Accounts.
  const resolvedAccounts = {
    recipe: {
      index: 0,
      isWritable: true as boolean,
      value: input.recipe ?? null,
    },
    checklist: {
      index: 1,
      isWritable: true as boolean,
      value: input.checklist ?? null,
    },
    asset: {
      index: 2,
      isWritable: true as boolean,
      value: input.asset ?? null,
    },
    collection: {
      index: 3,
      isWritable: false as boolean,
      value: input.collection ?? null,
    },
    payer: {
      index: 4,
      isWritable: true as boolean,
      value: input.payer ?? null,
    },
    mplCore: {
      index: 5,
      isWritable: false as boolean,
      value: input.mplCore ?? null,
    },
    systemProgram: {
      index: 6,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: WithdrawCoreAssetV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.payer.value) {
    resolvedAccounts.payer.value = context.payer;
  }
  if (!resolvedAccounts.mplCore.value) {
    resolvedAccounts.mplCore.value = publicKey(
      'CoREENxT6tW1HoK8ypY1SxRMZTcVPm7R94rH4PZNhX7d'
    );
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getWithdrawCoreAssetV1InstructionDataSerializer().serialize(
    resolvedArgs as WithdrawCoreAssetV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
