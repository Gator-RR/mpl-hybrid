/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';
import {
  IngredientTriggerPairV1,
  IngredientTriggerPairV1Args,
  getIngredientTriggerPairV1Serializer,
} from '../types';

// Accounts.
export type CreateRecipeV1InstructionAccounts = {
  recipe: PublicKey | Pda;
  authority?: Signer;
  systemProgram?: PublicKey | Pda;
};

// Data.
export type CreateRecipeV1InstructionData = {
  discriminator: Array<number>;
  reversible: boolean;
  inputs: Array<IngredientTriggerPairV1>;
  outputs: Array<IngredientTriggerPairV1>;
};

export type CreateRecipeV1InstructionDataArgs = {
  reversible: boolean;
  inputs: Array<IngredientTriggerPairV1Args>;
  outputs: Array<IngredientTriggerPairV1Args>;
};

export function getCreateRecipeV1InstructionDataSerializer(): Serializer<
  CreateRecipeV1InstructionDataArgs,
  CreateRecipeV1InstructionData
> {
  return mapSerializer<
    CreateRecipeV1InstructionDataArgs,
    any,
    CreateRecipeV1InstructionData
  >(
    struct<CreateRecipeV1InstructionData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['reversible', bool()],
        ['inputs', array(getIngredientTriggerPairV1Serializer())],
        ['outputs', array(getIngredientTriggerPairV1Serializer())],
      ],
      { description: 'CreateRecipeV1InstructionData' }
    ),
    (value) => ({
      ...value,
      discriminator: [109, 159, 88, 176, 11, 206, 112, 192],
    })
  ) as Serializer<
    CreateRecipeV1InstructionDataArgs,
    CreateRecipeV1InstructionData
  >;
}

// Args.
export type CreateRecipeV1InstructionArgs = CreateRecipeV1InstructionDataArgs;

// Instruction.
export function createRecipeV1(
  context: Pick<Context, 'identity' | 'programs'>,
  input: CreateRecipeV1InstructionAccounts & CreateRecipeV1InstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );

  // Accounts.
  const resolvedAccounts = {
    recipe: {
      index: 0,
      isWritable: true as boolean,
      value: input.recipe ?? null,
    },
    authority: {
      index: 1,
      isWritable: true as boolean,
      value: input.authority ?? null,
    },
    systemProgram: {
      index: 2,
      isWritable: false as boolean,
      value: input.systemProgram ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: CreateRecipeV1InstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.authority.value) {
    resolvedAccounts.authority.value = context.identity;
  }
  if (!resolvedAccounts.systemProgram.value) {
    resolvedAccounts.systemProgram.value = context.programs.getPublicKey(
      'splSystem',
      '11111111111111111111111111111111'
    );
    resolvedAccounts.systemProgram.isWritable = false;
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getCreateRecipeV1InstructionDataSerializer().serialize(
    resolvedArgs as CreateRecipeV1InstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
