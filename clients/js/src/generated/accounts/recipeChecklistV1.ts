/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  mapSerializer,
  struct,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  CheckPairV1,
  CheckPairV1Args,
  getCheckPairV1Serializer,
} from '../types';

export type RecipeChecklistV1 = Account<RecipeChecklistV1AccountData>;

export type RecipeChecklistV1AccountData = {
  discriminator: Array<number>;
  bump: number;
  inputs: Array<CheckPairV1>;
  outputs: Array<CheckPairV1>;
};

export type RecipeChecklistV1AccountDataArgs = {
  bump: number;
  inputs: Array<CheckPairV1Args>;
  outputs: Array<CheckPairV1Args>;
};

export function getRecipeChecklistV1AccountDataSerializer(): Serializer<
  RecipeChecklistV1AccountDataArgs,
  RecipeChecklistV1AccountData
> {
  return mapSerializer<
    RecipeChecklistV1AccountDataArgs,
    any,
    RecipeChecklistV1AccountData
  >(
    struct<RecipeChecklistV1AccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['bump', u8()],
        ['inputs', array(getCheckPairV1Serializer())],
        ['outputs', array(getCheckPairV1Serializer())],
      ],
      { description: 'RecipeChecklistV1AccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [154, 223, 148, 233, 56, 213, 13, 132],
    })
  ) as Serializer<
    RecipeChecklistV1AccountDataArgs,
    RecipeChecklistV1AccountData
  >;
}

export function deserializeRecipeChecklistV1(
  rawAccount: RpcAccount
): RecipeChecklistV1 {
  return deserializeAccount(
    rawAccount,
    getRecipeChecklistV1AccountDataSerializer()
  );
}

export async function fetchRecipeChecklistV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecipeChecklistV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'RecipeChecklistV1');
  return deserializeRecipeChecklistV1(maybeAccount);
}

export async function safeFetchRecipeChecklistV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecipeChecklistV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists
    ? deserializeRecipeChecklistV1(maybeAccount)
    : null;
}

export async function fetchAllRecipeChecklistV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecipeChecklistV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RecipeChecklistV1');
    return deserializeRecipeChecklistV1(maybeAccount);
  });
}

export async function safeFetchAllRecipeChecklistV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecipeChecklistV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) =>
      deserializeRecipeChecklistV1(maybeAccount as RpcAccount)
    );
}

export function getRecipeChecklistV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      bump: number;
      inputs: Array<CheckPairV1Args>;
      outputs: Array<CheckPairV1Args>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      bump: [8, u8()],
      inputs: [9, array(getCheckPairV1Serializer())],
      outputs: [null, array(getCheckPairV1Serializer())],
    })
    .deserializeUsing<RecipeChecklistV1>((account) =>
      deserializeRecipeChecklistV1(account)
    )
    .whereField('discriminator', [154, 223, 148, 233, 56, 213, 13, 132]);
}
