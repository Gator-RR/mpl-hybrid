/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  Context,
  Pda,
  PublicKey,
  RpcAccount,
  RpcGetAccountOptions,
  RpcGetAccountsOptions,
  assertAccountExists,
  deserializeAccount,
  gpaBuilder,
  publicKey as toPublicKey,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  array,
  bool,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u64,
  u8,
} from '@metaplex-foundation/umi/serializers';
import {
  IngredientTriggerPairV1,
  IngredientTriggerPairV1Args,
  getIngredientTriggerPairV1Serializer,
} from '../types';

export type RecipeV1 = Account<RecipeV1AccountData>;

export type RecipeV1AccountData = {
  discriminator: Array<number>;
  authority: PublicKey;
  count: bigint;
  reversible: boolean;
  bump: number;
  inputs: Array<IngredientTriggerPairV1>;
  outputs: Array<IngredientTriggerPairV1>;
};

export type RecipeV1AccountDataArgs = {
  authority: PublicKey;
  count: number | bigint;
  reversible: boolean;
  bump: number;
  inputs: Array<IngredientTriggerPairV1Args>;
  outputs: Array<IngredientTriggerPairV1Args>;
};

export function getRecipeV1AccountDataSerializer(): Serializer<
  RecipeV1AccountDataArgs,
  RecipeV1AccountData
> {
  return mapSerializer<RecipeV1AccountDataArgs, any, RecipeV1AccountData>(
    struct<RecipeV1AccountData>(
      [
        ['discriminator', array(u8(), { size: 8 })],
        ['authority', publicKeySerializer()],
        ['count', u64()],
        ['reversible', bool()],
        ['bump', u8()],
        ['inputs', array(getIngredientTriggerPairV1Serializer())],
        ['outputs', array(getIngredientTriggerPairV1Serializer())],
      ],
      { description: 'RecipeV1AccountData' }
    ),
    (value) => ({
      ...value,
      discriminator: [137, 249, 37, 80, 19, 50, 78, 169],
    })
  ) as Serializer<RecipeV1AccountDataArgs, RecipeV1AccountData>;
}

export function deserializeRecipeV1(rawAccount: RpcAccount): RecipeV1 {
  return deserializeAccount(rawAccount, getRecipeV1AccountDataSerializer());
}

export async function fetchRecipeV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecipeV1> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  assertAccountExists(maybeAccount, 'RecipeV1');
  return deserializeRecipeV1(maybeAccount);
}

export async function safeFetchRecipeV1(
  context: Pick<Context, 'rpc'>,
  publicKey: PublicKey | Pda,
  options?: RpcGetAccountOptions
): Promise<RecipeV1 | null> {
  const maybeAccount = await context.rpc.getAccount(
    toPublicKey(publicKey, false),
    options
  );
  return maybeAccount.exists ? deserializeRecipeV1(maybeAccount) : null;
}

export async function fetchAllRecipeV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecipeV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts.map((maybeAccount) => {
    assertAccountExists(maybeAccount, 'RecipeV1');
    return deserializeRecipeV1(maybeAccount);
  });
}

export async function safeFetchAllRecipeV1(
  context: Pick<Context, 'rpc'>,
  publicKeys: Array<PublicKey | Pda>,
  options?: RpcGetAccountsOptions
): Promise<RecipeV1[]> {
  const maybeAccounts = await context.rpc.getAccounts(
    publicKeys.map((key) => toPublicKey(key, false)),
    options
  );
  return maybeAccounts
    .filter((maybeAccount) => maybeAccount.exists)
    .map((maybeAccount) => deserializeRecipeV1(maybeAccount as RpcAccount));
}

export function getRecipeV1GpaBuilder(
  context: Pick<Context, 'rpc' | 'programs'>
) {
  const programId = context.programs.getPublicKey(
    'mplHybrid',
    'MPL4o4wMzndgh8T1NVDxELQCj5UQfYTYEkabX3wNKtb'
  );
  return gpaBuilder(context, programId)
    .registerFields<{
      discriminator: Array<number>;
      authority: PublicKey;
      count: number | bigint;
      reversible: boolean;
      bump: number;
      inputs: Array<IngredientTriggerPairV1Args>;
      outputs: Array<IngredientTriggerPairV1Args>;
    }>({
      discriminator: [0, array(u8(), { size: 8 })],
      authority: [8, publicKeySerializer()],
      count: [40, u64()],
      reversible: [48, bool()],
      bump: [49, u8()],
      inputs: [50, array(getIngredientTriggerPairV1Serializer())],
      outputs: [null, array(getIngredientTriggerPairV1Serializer())],
    })
    .deserializeUsing<RecipeV1>((account) => deserializeRecipeV1(account))
    .whereField('discriminator', [137, 249, 37, 80, 19, 50, 78, 169]);
}
