//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

#[cfg(feature = "anchor")]
use anchor_lang::prelude::{AnchorDeserialize, AnchorSerialize};
#[cfg(not(feature = "anchor"))]
use borsh::{BorshDeserialize, BorshSerialize};

/// Accounts.
pub struct UpdateNewDataV1 {
    pub nft_data: solana_program::pubkey::Pubkey,

    pub authority: solana_program::pubkey::Pubkey,

    pub collection: solana_program::pubkey::Pubkey,

    pub asset: solana_program::pubkey::Pubkey,

    pub token: solana_program::pubkey::Pubkey,

    pub fee_location: solana_program::pubkey::Pubkey,

    pub system_program: solana_program::pubkey::Pubkey,
}

impl UpdateNewDataV1 {
    pub fn instruction(
        &self,
        args: UpdateNewDataV1InstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: UpdateNewDataV1InstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.nft_data,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.authority,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.collection,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.asset, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.token, false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.fee_location,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.system_program,
            false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = UpdateNewDataV1InstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::MPL_HYBRID_ID,
            accounts,
            data,
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
pub struct UpdateNewDataV1InstructionData {
    discriminator: [u8; 8],
}

impl UpdateNewDataV1InstructionData {
    pub fn new() -> Self {
        Self {
            discriminator: [65, 122, 64, 164, 230, 47, 49, 230],
        }
    }
}

#[cfg_attr(not(feature = "anchor"), derive(BorshSerialize, BorshDeserialize))]
#[cfg_attr(feature = "anchor", derive(AnchorSerialize, AnchorDeserialize))]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct UpdateNewDataV1InstructionArgs {
    pub name: String,
    pub uri: String,
    pub max: u64,
    pub min: u64,
    pub amount: u64,
    pub fee_amount: u64,
    pub sol_fee_amount: u64,
    pub path: u16,
}

/// Instruction builder for `UpdateNewDataV1`.
///
/// ### Accounts:
///
///   0. `[writable]` nft_data
///   1. `[writable, signer]` authority
///   2. `[]` collection
///   3. `[]` asset
///   4. `[]` token
///   5. `[]` fee_location
///   6. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Default)]
pub struct UpdateNewDataV1Builder {
    nft_data: Option<solana_program::pubkey::Pubkey>,
    authority: Option<solana_program::pubkey::Pubkey>,
    collection: Option<solana_program::pubkey::Pubkey>,
    asset: Option<solana_program::pubkey::Pubkey>,
    token: Option<solana_program::pubkey::Pubkey>,
    fee_location: Option<solana_program::pubkey::Pubkey>,
    system_program: Option<solana_program::pubkey::Pubkey>,
    name: Option<String>,
    uri: Option<String>,
    max: Option<u64>,
    min: Option<u64>,
    amount: Option<u64>,
    fee_amount: Option<u64>,
    sol_fee_amount: Option<u64>,
    path: Option<u16>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl UpdateNewDataV1Builder {
    pub fn new() -> Self {
        Self::default()
    }
    #[inline(always)]
    pub fn nft_data(&mut self, nft_data: solana_program::pubkey::Pubkey) -> &mut Self {
        self.nft_data = Some(nft_data);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: solana_program::pubkey::Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn collection(&mut self, collection: solana_program::pubkey::Pubkey) -> &mut Self {
        self.collection = Some(collection);
        self
    }
    #[inline(always)]
    pub fn asset(&mut self, asset: solana_program::pubkey::Pubkey) -> &mut Self {
        self.asset = Some(asset);
        self
    }
    #[inline(always)]
    pub fn token(&mut self, token: solana_program::pubkey::Pubkey) -> &mut Self {
        self.token = Some(token);
        self
    }
    #[inline(always)]
    pub fn fee_location(&mut self, fee_location: solana_program::pubkey::Pubkey) -> &mut Self {
        self.fee_location = Some(fee_location);
        self
    }
    /// `[optional account, default to '11111111111111111111111111111111']`
    #[inline(always)]
    pub fn system_program(&mut self, system_program: solana_program::pubkey::Pubkey) -> &mut Self {
        self.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn max(&mut self, max: u64) -> &mut Self {
        self.max = Some(max);
        self
    }
    #[inline(always)]
    pub fn min(&mut self, min: u64) -> &mut Self {
        self.min = Some(min);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
    }
    #[inline(always)]
    pub fn fee_amount(&mut self, fee_amount: u64) -> &mut Self {
        self.fee_amount = Some(fee_amount);
        self
    }
    #[inline(always)]
    pub fn sol_fee_amount(&mut self, sol_fee_amount: u64) -> &mut Self {
        self.sol_fee_amount = Some(sol_fee_amount);
        self
    }
    #[inline(always)]
    pub fn path(&mut self, path: u16) -> &mut Self {
        self.path = Some(path);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = UpdateNewDataV1 {
            nft_data: self.nft_data.expect("nft_data is not set"),
            authority: self.authority.expect("authority is not set"),
            collection: self.collection.expect("collection is not set"),
            asset: self.asset.expect("asset is not set"),
            token: self.token.expect("token is not set"),
            fee_location: self.fee_location.expect("fee_location is not set"),
            system_program: self
                .system_program
                .unwrap_or(solana_program::pubkey!("11111111111111111111111111111111")),
        };
        let args = UpdateNewDataV1InstructionArgs {
            name: self.name.clone().expect("name is not set"),
            uri: self.uri.clone().expect("uri is not set"),
            max: self.max.clone().expect("max is not set"),
            min: self.min.clone().expect("min is not set"),
            amount: self.amount.clone().expect("amount is not set"),
            fee_amount: self.fee_amount.clone().expect("fee_amount is not set"),
            sol_fee_amount: self
                .sol_fee_amount
                .clone()
                .expect("sol_fee_amount is not set"),
            path: self.path.clone().expect("path is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `update_new_data_v1` CPI accounts.
pub struct UpdateNewDataV1CpiAccounts<'a, 'b> {
    pub nft_data: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection: &'b solana_program::account_info::AccountInfo<'a>,

    pub asset: &'b solana_program::account_info::AccountInfo<'a>,

    pub token: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_location: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `update_new_data_v1` CPI instruction.
pub struct UpdateNewDataV1Cpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,

    pub nft_data: &'b solana_program::account_info::AccountInfo<'a>,

    pub authority: &'b solana_program::account_info::AccountInfo<'a>,

    pub collection: &'b solana_program::account_info::AccountInfo<'a>,

    pub asset: &'b solana_program::account_info::AccountInfo<'a>,

    pub token: &'b solana_program::account_info::AccountInfo<'a>,

    pub fee_location: &'b solana_program::account_info::AccountInfo<'a>,

    pub system_program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: UpdateNewDataV1InstructionArgs,
}

impl<'a, 'b> UpdateNewDataV1Cpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: UpdateNewDataV1CpiAccounts<'a, 'b>,
        args: UpdateNewDataV1InstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            nft_data: accounts.nft_data,
            authority: accounts.authority,
            collection: accounts.collection,
            asset: accounts.asset,
            token: accounts.token,
            fee_location: accounts.fee_location,
            system_program: accounts.system_program,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(7 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.nft_data.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.authority.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.collection.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.asset.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.token.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.fee_location.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = UpdateNewDataV1InstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::MPL_HYBRID_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(7 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.nft_data.clone());
        account_infos.push(self.authority.clone());
        account_infos.push(self.collection.clone());
        account_infos.push(self.asset.clone());
        account_infos.push(self.token.clone());
        account_infos.push(self.fee_location.clone());
        account_infos.push(self.system_program.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `UpdateNewDataV1` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` nft_data
///   1. `[writable, signer]` authority
///   2. `[]` collection
///   3. `[]` asset
///   4. `[]` token
///   5. `[]` fee_location
///   6. `[]` system_program
pub struct UpdateNewDataV1CpiBuilder<'a, 'b> {
    instruction: Box<UpdateNewDataV1CpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UpdateNewDataV1CpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(UpdateNewDataV1CpiBuilderInstruction {
            __program: program,
            nft_data: None,
            authority: None,
            collection: None,
            asset: None,
            token: None,
            fee_location: None,
            system_program: None,
            name: None,
            uri: None,
            max: None,
            min: None,
            amount: None,
            fee_amount: None,
            sol_fee_amount: None,
            path: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    #[inline(always)]
    pub fn nft_data(
        &mut self,
        nft_data: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nft_data = Some(nft_data);
        self
    }
    #[inline(always)]
    pub fn authority(
        &mut self,
        authority: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    #[inline(always)]
    pub fn collection(
        &mut self,
        collection: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.collection = Some(collection);
        self
    }
    #[inline(always)]
    pub fn asset(&mut self, asset: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.asset = Some(asset);
        self
    }
    #[inline(always)]
    pub fn token(&mut self, token: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.token = Some(token);
        self
    }
    #[inline(always)]
    pub fn fee_location(
        &mut self,
        fee_location: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.fee_location = Some(fee_location);
        self
    }
    #[inline(always)]
    pub fn system_program(
        &mut self,
        system_program: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.system_program = Some(system_program);
        self
    }
    #[inline(always)]
    pub fn name(&mut self, name: String) -> &mut Self {
        self.instruction.name = Some(name);
        self
    }
    #[inline(always)]
    pub fn uri(&mut self, uri: String) -> &mut Self {
        self.instruction.uri = Some(uri);
        self
    }
    #[inline(always)]
    pub fn max(&mut self, max: u64) -> &mut Self {
        self.instruction.max = Some(max);
        self
    }
    #[inline(always)]
    pub fn min(&mut self, min: u64) -> &mut Self {
        self.instruction.min = Some(min);
        self
    }
    #[inline(always)]
    pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
    }
    #[inline(always)]
    pub fn fee_amount(&mut self, fee_amount: u64) -> &mut Self {
        self.instruction.fee_amount = Some(fee_amount);
        self
    }
    #[inline(always)]
    pub fn sol_fee_amount(&mut self, sol_fee_amount: u64) -> &mut Self {
        self.instruction.sol_fee_amount = Some(sol_fee_amount);
        self
    }
    #[inline(always)]
    pub fn path(&mut self, path: u16) -> &mut Self {
        self.instruction.path = Some(path);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = UpdateNewDataV1InstructionArgs {
            name: self.instruction.name.clone().expect("name is not set"),
            uri: self.instruction.uri.clone().expect("uri is not set"),
            max: self.instruction.max.clone().expect("max is not set"),
            min: self.instruction.min.clone().expect("min is not set"),
            amount: self.instruction.amount.clone().expect("amount is not set"),
            fee_amount: self
                .instruction
                .fee_amount
                .clone()
                .expect("fee_amount is not set"),
            sol_fee_amount: self
                .instruction
                .sol_fee_amount
                .clone()
                .expect("sol_fee_amount is not set"),
            path: self.instruction.path.clone().expect("path is not set"),
        };
        let instruction = UpdateNewDataV1Cpi {
            __program: self.instruction.__program,

            nft_data: self.instruction.nft_data.expect("nft_data is not set"),

            authority: self.instruction.authority.expect("authority is not set"),

            collection: self.instruction.collection.expect("collection is not set"),

            asset: self.instruction.asset.expect("asset is not set"),

            token: self.instruction.token.expect("token is not set"),

            fee_location: self
                .instruction
                .fee_location
                .expect("fee_location is not set"),

            system_program: self
                .instruction
                .system_program
                .expect("system_program is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct UpdateNewDataV1CpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    nft_data: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    collection: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    asset: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    token: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    fee_location: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    system_program: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    name: Option<String>,
    uri: Option<String>,
    max: Option<u64>,
    min: Option<u64>,
    amount: Option<u64>,
    fee_amount: Option<u64>,
    sol_fee_amount: Option<u64>,
    path: Option<u16>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
